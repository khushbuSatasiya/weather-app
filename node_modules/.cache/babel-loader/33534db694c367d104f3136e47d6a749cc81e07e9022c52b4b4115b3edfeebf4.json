{"ast":null,"code":"var _jsxFileName = \"/home/khushbu/workspace/weather-app/src/features/weather/component/lineChart.tsx\",\n  _s = $RefreshSig$();\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, LineElement, PointElement, LinearScale, Title, CategoryScale } from \"chart.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { formattedTime } from \"shared/util/utility\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(LineElement, PointElement, LinearScale, Title, CategoryScale);\nconst LineChart = props => {\n  _s();\n  const {\n    chartData\n  } = props;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      var _chartRef$current;\n      (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.chartInstance.destroy();\n    }\n  }, []);\n  const data = {\n    labels: chartData.map(data => formattedTime(data.time)),\n    datasets: [{\n      label: \"Sales\",\n      data: chartData.map(data => data.temp_c),\n      fill: false,\n      borderColor: \"rgb(75, 192, 192)\",\n      tension: 0.4\n    }]\n  };\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          color: \"#ffffff\",\n          font: {\n            family: \"Sofia-pro\",\n            weight: \"700\",\n            size: 15\n          }\n        }\n      },\n      x: {\n        ticks: {\n          color: \"#ffffff\",\n          font: {\n            family: \"Sofia-pro\",\n            weight: \"700\",\n            size: 12\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      id: `${Math.random()}`,\n      data: data,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(LineChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["Line","Chart","ChartJS","LineElement","PointElement","LinearScale","Title","CategoryScale","React","useEffect","useRef","formattedTime","register","LineChart","props","chartData","chartRef","current","chartInstance","destroy","data","labels","map","time","datasets","label","temp_c","fill","borderColor","tension","chartOptions","scales","y","beginAtZero","ticks","color","font","family","weight","size","x","Math","random"],"sources":["/home/khushbu/workspace/weather-app/src/features/weather/component/lineChart.tsx"],"sourcesContent":["import { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  LineElement,\n  PointElement,\n  LinearScale,\n  Title,\n  CategoryScale,\n} from \"chart.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { formattedTime } from \"shared/util/utility\";\n\ninterface IProps {\n  chartData: any;\n}\n\nChartJS.register(LineElement, PointElement, LinearScale, Title, CategoryScale);\nconst LineChart: React.FC<IProps> = (props) => {\n  const { chartData } = props;\n  const chartRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      chartRef.current?.chartInstance.destroy();\n    }\n  }, []);\n\n  const data = {\n    labels: chartData.map((data: any) => formattedTime(data.time)),\n    datasets: [\n      {\n        label: \"Sales\",\n        data: chartData.map((data: any) => data.temp_c),\n        fill: false,\n        borderColor: \"rgb(75, 192, 192)\",\n        tension: 0.4,\n      },\n    ],\n  };\n\n  const chartOptions = {\n    scales: {\n      y: {\n        beginAtZero: true,\n\n        ticks: {\n          color: \"#ffffff\",\n          font: {\n            family: \"Sofia-pro\",\n            weight: \"700\",\n            size: 15,\n          },\n        },\n      },\n      x: {\n        ticks: {\n          color: \"#ffffff\",\n          font: {\n            family: \"Sofia-pro\",\n            weight: \"700\",\n            size: 12,\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <div>\n      <Line id={`${Math.random()}`} data={data} options={chartOptions} />\n    </div>\n  );\n};\n\nexport default LineChart;\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,aAAa,QACR,UAAU;AACjB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,aAAa,QAAQ,qBAAqB;AAAC;AAMpDT,OAAO,CAACU,QAAQ,CAACT,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,aAAa,CAAC;AAC9E,MAAMM,SAA2B,GAAIC,KAAK,IAAK;EAAA;EAC7C,MAAM;IAAEC;EAAU,CAAC,GAAGD,KAAK;EAC3B,MAAME,QAAQ,GAAGN,MAAM,CAAM,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;MAAA;MAChC,qBAAAD,QAAQ,CAACC,OAAO,sDAAhB,kBAAkBC,aAAa,CAACC,OAAO,EAAE;IAC3C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,IAAI,GAAG;IACXC,MAAM,EAAEN,SAAS,CAACO,GAAG,CAAEF,IAAS,IAAKT,aAAa,CAACS,IAAI,CAACG,IAAI,CAAC,CAAC;IAC9DC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,OAAO;MACdL,IAAI,EAAEL,SAAS,CAACO,GAAG,CAAEF,IAAS,IAAKA,IAAI,CAACM,MAAM,CAAC;MAC/CC,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,mBAAmB;MAChCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBC,MAAM,EAAE;MACNC,CAAC,EAAE;QACDC,WAAW,EAAE,IAAI;QAEjBC,KAAK,EAAE;UACLC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;YACJC,MAAM,EAAE,WAAW;YACnBC,MAAM,EAAE,KAAK;YACbC,IAAI,EAAE;UACR;QACF;MACF,CAAC;MACDC,CAAC,EAAE;QACDN,KAAK,EAAE;UACLC,KAAK,EAAE,SAAS;UAChBC,IAAI,EAAE;YACJC,MAAM,EAAE,WAAW;YACnBC,MAAM,EAAE,KAAK;YACbC,IAAI,EAAE;UACR;QACF;MACF;IACF;EACF,CAAC;EAED,oBACE;IAAA,uBACE,QAAC,IAAI;MAAC,EAAE,EAAG,GAAEE,IAAI,CAACC,MAAM,EAAG,EAAE;MAAC,IAAI,EAAEtB,IAAK;MAAC,OAAO,EAAEU;IAAa;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC/D;AAEV,CAAC;AAAC,GAvDIjB,SAA2B;AAAA,KAA3BA,SAA2B;AAyDjC,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as Yup from 'yup';\nimport { PASSWORD_VALIDATOR_REGEX } from './constants';\nconst loginFormValidationSchema = Yup.object().shape({\n  email: Yup.string().email('Please Enter Valid Email').required('Please Enter Email').strict(true),\n  password: Yup.string().required('Please Enter Password').matches(PASSWORD_VALIDATOR_REGEX, 'Must Contain 8 Characters, One Number and One Special Case Character ').strict(true)\n});\nconst forgetPasswordValidationSchema = Yup.object().shape({\n  email: Yup.string().email().required('Email is required').strict(true)\n});\nconst forgotPasswordFormValidationSchema = Yup.object().shape({\n  email: Yup.string().email('Please Enter Valid Email').required('Please Enter Email').strict(true)\n});\nconst resetPasswordValidationSchema = Yup.object().shape({\n  password: Yup.string().min(8, 'Password must be 8 characters long').required('Password').strict(true).matches(/(?=.*\\d)(?!.*[\\s])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,}/, 'Password must contain 1 Small Character, 1 Upper character, 1 special character and min length should be 8'),\n  password_confirmation: Yup.string().min(8, 'Password Confirmation').required('Password Confirmation').strict(true).test('match', 'Password does not match', function (password) {\n    return password === this.parent.password;\n  })\n});\nconst changePasswordValidationSchema = Yup.object().shape({\n  old_password: Yup.string().required('Old Password').strict(true),\n  new_password: Yup.string().required('New Password').strict(true).matches(/(?=.*\\d)(?!.*[\\s])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,}/, 'Password must contain 1 Small Character, 1 Upper character, 1 special character and min length should be 8'),\n  new_password_confirmation: Yup.string().required('Password Confirmation').strict(true).test('match', 'Password does not match', function (password) {\n    return password === this.parent.new_password;\n  })\n});\nconst resetPasswordFormValidationSchema = Yup.object().shape({\n  password: Yup.string().required('Please Enter Password').matches(PASSWORD_VALIDATOR_REGEX, 'Must Contain 8 Characters, One Number and One Special Case Character ').strict(true),\n  confirmPassword: Yup.string().required('Please enter confirm password').oneOf([Yup.ref('password'), null], 'Passwords must match').strict(true)\n});\nexport { loginFormValidationSchema, forgetPasswordValidationSchema, resetPasswordValidationSchema, changePasswordValidationSchema, resetPasswordFormValidationSchema };","map":{"version":3,"names":["Yup","PASSWORD_VALIDATOR_REGEX","loginFormValidationSchema","object","shape","email","string","required","strict","password","matches","forgetPasswordValidationSchema","forgotPasswordFormValidationSchema","resetPasswordValidationSchema","min","password_confirmation","test","parent","changePasswordValidationSchema","old_password","new_password","new_password_confirmation","resetPasswordFormValidationSchema","confirmPassword","oneOf","ref"],"sources":["/home/scaletech/Documents/Work-space/base-frontend-x-master/src/shared/constants/validation-schema.ts"],"sourcesContent":["import * as Yup from 'yup';\nimport { PASSWORD_VALIDATOR_REGEX } from './constants';\n\nconst loginFormValidationSchema = Yup.object().shape({\n\temail: Yup.string().email('Please Enter Valid Email').required('Please Enter Email').strict(true),\n\tpassword: Yup.string()\n\t\t.required('Please Enter Password')\n\t\t.matches(PASSWORD_VALIDATOR_REGEX, 'Must Contain 8 Characters, One Number and One Special Case Character ')\n\t\t.strict(true)\n});\n\nconst forgetPasswordValidationSchema = Yup.object().shape({\n\temail: Yup.string().email().required('Email is required').strict(true)\n});\nconst forgotPasswordFormValidationSchema = Yup.object().shape({\n\temail: Yup.string().email('Please Enter Valid Email').required('Please Enter Email').strict(true)\n});\n\nconst resetPasswordValidationSchema = Yup.object().shape({\n\tpassword: Yup.string()\n\t\t.min(8, 'Password must be 8 characters long')\n\t\t.required('Password')\n\t\t.strict(true)\n\t\t.matches(\n\t\t\t/(?=.*\\d)(?!.*[\\s])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,}/,\n\t\t\t'Password must contain 1 Small Character, 1 Upper character, 1 special character and min length should be 8'\n\t\t),\n\tpassword_confirmation: Yup.string()\n\t\t.min(8, 'Password Confirmation')\n\t\t.required('Password Confirmation')\n\t\t.strict(true)\n\t\t.test('match', 'Password does not match', function (password) {\n\t\t\treturn password === this.parent.password;\n\t\t})\n});\n\nconst changePasswordValidationSchema = Yup.object().shape({\n\told_password: Yup.string().required('Old Password').strict(true),\n\tnew_password: Yup.string()\n\t\t.required('New Password')\n\t\t.strict(true)\n\t\t.matches(\n\t\t\t/(?=.*\\d)(?!.*[\\s])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,}/,\n\t\t\t'Password must contain 1 Small Character, 1 Upper character, 1 special character and min length should be 8'\n\t\t),\n\tnew_password_confirmation: Yup.string()\n\t\t.required('Password Confirmation')\n\t\t.strict(true)\n\t\t.test('match', 'Password does not match', function (password) {\n\t\t\treturn password === this.parent.new_password;\n\t\t})\n});\n\nconst resetPasswordFormValidationSchema = Yup.object().shape({\n\tpassword: Yup.string()\n\t\t.required('Please Enter Password')\n\t\t.matches(PASSWORD_VALIDATOR_REGEX, 'Must Contain 8 Characters, One Number and One Special Case Character ')\n\t\t.strict(true),\n\tconfirmPassword: Yup.string()\n\t\t.required('Please enter confirm password')\n\t\t.oneOf([Yup.ref('password'), null], 'Passwords must match')\n\t\t.strict(true)\n});\n\nexport {\n\tloginFormValidationSchema,\n\tforgetPasswordValidationSchema,\n\tresetPasswordValidationSchema,\n\tchangePasswordValidationSchema,\n\tresetPasswordFormValidationSchema\n};\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,SAASC,wBAAwB,QAAQ,aAAa;AAEtD,MAAMC,yBAAyB,GAAGF,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EACpDC,KAAK,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACD,KAAK,CAAC,0BAA0B,CAAC,CAACE,QAAQ,CAAC,oBAAoB,CAAC,CAACC,MAAM,CAAC,IAAI,CAAC;EACjGC,QAAQ,EAAET,GAAG,CAACM,MAAM,EAAE,CACpBC,QAAQ,CAAC,uBAAuB,CAAC,CACjCG,OAAO,CAACT,wBAAwB,EAAE,uEAAuE,CAAC,CAC1GO,MAAM,CAAC,IAAI;AACd,CAAC,CAAC;AAEF,MAAMG,8BAA8B,GAAGX,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EACzDC,KAAK,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACD,KAAK,EAAE,CAACE,QAAQ,CAAC,mBAAmB,CAAC,CAACC,MAAM,CAAC,IAAI;AACtE,CAAC,CAAC;AACF,MAAMI,kCAAkC,GAAGZ,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EAC7DC,KAAK,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACD,KAAK,CAAC,0BAA0B,CAAC,CAACE,QAAQ,CAAC,oBAAoB,CAAC,CAACC,MAAM,CAAC,IAAI;AACjG,CAAC,CAAC;AAEF,MAAMK,6BAA6B,GAAGb,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EACxDK,QAAQ,EAAET,GAAG,CAACM,MAAM,EAAE,CACpBQ,GAAG,CAAC,CAAC,EAAE,oCAAoC,CAAC,CAC5CP,QAAQ,CAAC,UAAU,CAAC,CACpBC,MAAM,CAAC,IAAI,CAAC,CACZE,OAAO,CACP,uDAAuD,EACvD,4GAA4G,CAC5G;EACFK,qBAAqB,EAAEf,GAAG,CAACM,MAAM,EAAE,CACjCQ,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAC/BP,QAAQ,CAAC,uBAAuB,CAAC,CACjCC,MAAM,CAAC,IAAI,CAAC,CACZQ,IAAI,CAAC,OAAO,EAAE,yBAAyB,EAAE,UAAUP,QAAQ,EAAE;IAC7D,OAAOA,QAAQ,KAAK,IAAI,CAACQ,MAAM,CAACR,QAAQ;EACzC,CAAC;AACH,CAAC,CAAC;AAEF,MAAMS,8BAA8B,GAAGlB,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EACzDe,YAAY,EAAEnB,GAAG,CAACM,MAAM,EAAE,CAACC,QAAQ,CAAC,cAAc,CAAC,CAACC,MAAM,CAAC,IAAI,CAAC;EAChEY,YAAY,EAAEpB,GAAG,CAACM,MAAM,EAAE,CACxBC,QAAQ,CAAC,cAAc,CAAC,CACxBC,MAAM,CAAC,IAAI,CAAC,CACZE,OAAO,CACP,uDAAuD,EACvD,4GAA4G,CAC5G;EACFW,yBAAyB,EAAErB,GAAG,CAACM,MAAM,EAAE,CACrCC,QAAQ,CAAC,uBAAuB,CAAC,CACjCC,MAAM,CAAC,IAAI,CAAC,CACZQ,IAAI,CAAC,OAAO,EAAE,yBAAyB,EAAE,UAAUP,QAAQ,EAAE;IAC7D,OAAOA,QAAQ,KAAK,IAAI,CAACQ,MAAM,CAACG,YAAY;EAC7C,CAAC;AACH,CAAC,CAAC;AAEF,MAAME,iCAAiC,GAAGtB,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EAC5DK,QAAQ,EAAET,GAAG,CAACM,MAAM,EAAE,CACpBC,QAAQ,CAAC,uBAAuB,CAAC,CACjCG,OAAO,CAACT,wBAAwB,EAAE,uEAAuE,CAAC,CAC1GO,MAAM,CAAC,IAAI,CAAC;EACde,eAAe,EAAEvB,GAAG,CAACM,MAAM,EAAE,CAC3BC,QAAQ,CAAC,+BAA+B,CAAC,CACzCiB,KAAK,CAAC,CAACxB,GAAG,CAACyB,GAAG,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAC1DjB,MAAM,CAAC,IAAI;AACd,CAAC,CAAC;AAEF,SACCN,yBAAyB,EACzBS,8BAA8B,EAC9BE,6BAA6B,EAC7BK,8BAA8B,EAC9BI,iCAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _ from 'lodash';\n/**\n * create action creator\n * @param ACTION - type of action\n * @param data - data\n */\nexport const createAction = function (ACTION) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: ACTION,\n    payload: data\n  };\n};\n\n/**\n * create loading selector\n * @param actions - actions to dispatch\n */\nexport const createLoadingSelector = actions => state =>\n// returns true only when all actions is not loading\n_(actions).some(action => _.get(state, `loading.api.${action}`));\n\n/**\n * dispatch action after given time (to handle some events like close modal after success api call)\n * @param dispatch - dispatch object\n * @param action - action type\n * @param time - time after which action is to be dispatched (default - 100ms)\n */\nexport const dispatchActionAfterTime = function (dispatch, action) {\n  let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  setTimeout(() => {\n    dispatch(createAction(action));\n  }, time);\n};\nexport const camelCaseToFirstUpperLetter = text => {\n  const result = text.replace(/([A-Z])/g, ' $1');\n  const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n  return finalResult;\n};\nexport const debounce = function (func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 400;\n  let h;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    clearTimeout(h);\n    h = setTimeout(() => func(...args), wait);\n  };\n};\nexport const generateColor = () => {\n  const x = Math.floor(Math.random() * 256);\n  const y = Math.floor(Math.random() * 256);\n  const z = Math.floor(Math.random() * 256);\n  const RGBColor = `${x} ,${y}, ${z}`;\n  return RGBColor;\n};","map":{"version":3,"names":["_","createAction","ACTION","data","type","payload","createLoadingSelector","actions","state","some","action","get","dispatchActionAfterTime","dispatch","time","setTimeout","camelCaseToFirstUpperLetter","text","result","replace","finalResult","charAt","toUpperCase","slice","debounce","func","wait","h","args","clearTimeout","generateColor","x","Math","floor","random","y","z","RGBColor"],"sources":["/home/scaletech/Documents/Work-space/base-frontend-x-master/src/shared/util/utility.ts"],"sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport _ from 'lodash';\nimport { IAction, IState } from 'shared/interface/state';\n\n/**\n * create action creator\n * @param ACTION - type of action\n * @param data - data\n */\nexport const createAction = (ACTION: string, data: any = null): IAction => ({\n\ttype: ACTION,\n\tpayload: data\n});\n\n/**\n * create loading selector\n * @param actions - actions to dispatch\n */\nexport const createLoadingSelector = (actions: string[]) => (state: IState) =>\n\t// returns true only when all actions is not loading\n\t_(actions).some((action: string) => _.get(state, `loading.api.${action}`));\n\n/**\n * dispatch action after given time (to handle some events like close modal after success api call)\n * @param dispatch - dispatch object\n * @param action - action type\n * @param time - time after which action is to be dispatched (default - 100ms)\n */\nexport const dispatchActionAfterTime = (\n\tdispatch: ThunkDispatch<unknown, unknown, IAction>,\n\taction: string,\n\ttime = 100\n) => {\n\tsetTimeout(() => {\n\t\tdispatch(createAction(action));\n\t}, time);\n};\n\nexport const camelCaseToFirstUpperLetter = (text: string) => {\n\tconst result = text.replace(/([A-Z])/g, ' $1');\n\tconst finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n\treturn finalResult;\n};\n\nexport const debounce = (func: any, wait = 400) => {\n\tlet h: NodeJS.Timeout;\n\treturn (...args: any) => {\n\t\tclearTimeout(h);\n\t\th = setTimeout(() => func(...args), wait);\n\t};\n};\nexport const generateColor = () => {\n\tconst x = Math.floor(Math.random() * 256);\n\tconst y = Math.floor(Math.random() * 256);\n\tconst z = Math.floor(Math.random() * 256);\n\tconst RGBColor = `${x} ,${y}, ${z}`;\n\treturn RGBColor;\n};\n"],"mappings":"AACA,OAAOA,CAAC,MAAM,QAAQ;AAGtB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,UAACC,MAAc;EAAA,IAAEC,IAAS,uEAAG,IAAI;EAAA,OAAe;IAC3EC,IAAI,EAAEF,MAAM;IACZG,OAAO,EAAEF;EACV,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMG,qBAAqB,GAAIC,OAAiB,IAAMC,KAAa;AACzE;AACAR,CAAC,CAACO,OAAO,CAAC,CAACE,IAAI,CAAEC,MAAc,IAAKV,CAAC,CAACW,GAAG,CAACH,KAAK,EAAG,eAAcE,MAAO,EAAC,CAAC,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,uBAAuB,GAAG,UACtCC,QAAkD,EAClDH,MAAc,EAEV;EAAA,IADJI,IAAI,uEAAG,GAAG;EAEVC,UAAU,CAAC,MAAM;IAChBF,QAAQ,CAACZ,YAAY,CAACS,MAAM,CAAC,CAAC;EAC/B,CAAC,EAAEI,IAAI,CAAC;AACT,CAAC;AAED,OAAO,MAAME,2BAA2B,GAAIC,IAAY,IAAK;EAC5D,MAAMC,MAAM,GAAGD,IAAI,CAACE,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;EAC9C,MAAMC,WAAW,GAAGF,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC;EACpE,OAAOH,WAAW;AACnB,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAG,UAACC,IAAS,EAAiB;EAAA,IAAfC,IAAI,uEAAG,GAAG;EAC7C,IAAIC,CAAiB;EACrB,OAAO,YAAkB;IAAA,kCAAdC,IAAI;MAAJA,IAAI;IAAA;IACdC,YAAY,CAACF,CAAC,CAAC;IACfA,CAAC,GAAGZ,UAAU,CAAC,MAAMU,IAAI,CAAC,GAAGG,IAAI,CAAC,EAAEF,IAAI,CAAC;EAC1C,CAAC;AACF,CAAC;AACD,OAAO,MAAMI,aAAa,GAAG,MAAM;EAClC,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACzC,MAAMC,CAAC,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACzC,MAAME,CAAC,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EACzC,MAAMG,QAAQ,GAAI,GAAEN,CAAE,KAAII,CAAE,KAAIC,CAAE,EAAC;EACnC,OAAOC,QAAQ;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _ from 'lodash';\n/**\n * create action creator\n * @param ACTION - type of action\n * @param data - data\n */\nexport const createAction = function (ACTION) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: ACTION,\n    payload: data\n  };\n};\n\n/**\n * create loading selector\n * @param actions - actions to dispatch\n */\nexport const createLoadingSelector = actions => state =>\n// returns true only when all actions is not loading\n_(actions).some(action => _.get(state, `loading.api.${action}`));\n\n/**\n * dispatch action after given time (to handle some events like close modal after success api call)\n * @param dispatch - dispatch object\n * @param action - action type\n * @param time - time after which action is to be dispatched (default - 100ms)\n */\nexport const dispatchActionAfterTime = function (dispatch, action) {\n  let time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  setTimeout(() => {\n    dispatch(createAction(action));\n  }, time);\n};","map":{"version":3,"names":["_","createAction","ACTION","data","type","payload","createLoadingSelector","actions","state","some","action","get","dispatchActionAfterTime","dispatch","time","setTimeout"],"sources":["/home/scaletech/Documents/Work-space/base-frontend-x-master/src/shared/util/utility.ts"],"sourcesContent":["import { ThunkDispatch } from 'redux-thunk';\nimport _ from 'lodash';\nimport { IAction, IState } from 'shared/interface/state';\n\n/**\n * create action creator\n * @param ACTION - type of action\n * @param data - data\n */\nexport const createAction = (ACTION: string, data: any = null): IAction => ({\n\ttype: ACTION,\n\tpayload: data\n});\n\n/**\n * create loading selector\n * @param actions - actions to dispatch\n */\nexport const createLoadingSelector = (actions: string[]) => (state: IState) =>\n\t// returns true only when all actions is not loading\n\t_(actions).some((action: string) => _.get(state, `loading.api.${action}`));\n\n/**\n * dispatch action after given time (to handle some events like close modal after success api call)\n * @param dispatch - dispatch object\n * @param action - action type\n * @param time - time after which action is to be dispatched (default - 100ms)\n */\nexport const dispatchActionAfterTime = (\n\tdispatch: ThunkDispatch<unknown, unknown, IAction>,\n\taction: string,\n\ttime = 100\n) => {\n\tsetTimeout(() => {\n\t\tdispatch(createAction(action));\n\t}, time);\n};\n"],"mappings":"AACA,OAAOA,CAAC,MAAM,QAAQ;AAGtB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,UAACC,MAAc;EAAA,IAAEC,IAAS,uEAAG,IAAI;EAAA,OAAe;IAC3EC,IAAI,EAAEF,MAAM;IACZG,OAAO,EAAEF;EACV,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMG,qBAAqB,GAAIC,OAAiB,IAAMC,KAAa;AACzE;AACAR,CAAC,CAACO,OAAO,CAAC,CAACE,IAAI,CAAEC,MAAc,IAAKV,CAAC,CAACW,GAAG,CAACH,KAAK,EAAG,eAAcE,MAAO,EAAC,CAAC,CAAC;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,uBAAuB,GAAG,UACtCC,QAAkD,EAClDH,MAAc,EAEV;EAAA,IADJI,IAAI,uEAAG,GAAG;EAEVC,UAAU,CAAC,MAAM;IAChBF,QAAQ,CAACZ,YAAY,CAACS,MAAM,CAAC,CAAC;EAC/B,CAAC,EAAEI,IAAI,CAAC;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
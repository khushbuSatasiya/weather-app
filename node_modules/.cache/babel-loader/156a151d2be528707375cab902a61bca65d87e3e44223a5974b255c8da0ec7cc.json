{"ast":null,"code":"import CryptoJS from 'crypto-js';\nconst KEY = process.env.REACT_APP_ENCRYPTION_KEY;\n\n/**\n * function to check if user is logged in or not\n */\nconst isLogin = () => {\n  if (localStorage.authData) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/**\n * function to get authentication data\n */\nconst getAuthData = () => {\n  try {\n    const data = localStorage.authData;\n    if (data) {\n      const bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n      const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      return decryptedData;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * function to set user authentication data\n */\nconst setAuthData = data => {\n  const cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n  localStorage.setItem('authData', cipherText.toString());\n};\n\n/**\n * function to remove user authentication data\n */\nconst removeAuthData = () => {\n  localStorage.removeItem('authData');\n};\n\n/**\n * function to get user access token\n */\nconst getAccessToken = () => {\n  const data = getAuthData();\n  if (data && data.token) {\n    return data.token;\n  } else {\n    return '';\n  }\n};\n\n/**\n * function to get user language\n */\nexport const getUserLanguage = () => {\n  return 'en';\n};\nconst AuthService = {\n  isLogin: isLogin,\n  getAccessToken: getAccessToken,\n  setAuthData: setAuthData,\n  getAuthData: getAuthData,\n  removeAuthData: removeAuthData\n};\nexport default AuthService;","map":{"version":3,"names":["CryptoJS","KEY","process","env","REACT_APP_ENCRYPTION_KEY","isLogin","localStorage","authData","getAuthData","data","bytes","AES","decrypt","toString","decryptedData","JSON","parse","enc","Utf8","e","setAuthData","cipherText","encrypt","stringify","setItem","removeAuthData","removeItem","getAccessToken","token","getUserLanguage","AuthService"],"sources":["/home/scaletech/Documents/Work-space/base-frontend-x-master/src/shared/services/auth.service.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\nimport { ILoginResponse } from 'features/auth/interface/auth';\n\nconst KEY: string = process.env.REACT_APP_ENCRYPTION_KEY as string;\n\n/**\n * function to check if user is logged in or not\n */\nconst isLogin = (): boolean => {\n\tif (localStorage.authData) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * function to get authentication data\n */\nconst getAuthData = () => {\n\ttry {\n\t\tconst data = localStorage.authData;\n\t\tif (data) {\n\t\t\tconst bytes = CryptoJS.AES.decrypt(data.toString(), KEY);\n\t\t\tconst decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) as ILoginResponse;\n\t\t\treturn decryptedData;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\n/**\n * function to set user authentication data\n */\nconst setAuthData = (data: ILoginResponse): void => {\n\tconst cipherText = CryptoJS.AES.encrypt(JSON.stringify(data), KEY);\n\tlocalStorage.setItem('authData', cipherText.toString());\n};\n\n/**\n * function to remove user authentication data\n */\nconst removeAuthData = (): void => {\n\tlocalStorage.removeItem('authData');\n};\n\n/**\n * function to get user access token\n */\nconst getAccessToken = (): string => {\n\tconst data = getAuthData();\n\tif (data && data.token) {\n\t\treturn data.token;\n\t} else {\n\t\treturn '';\n\t}\n};\n\n/**\n * function to get user language\n */\nexport const getUserLanguage = (): string => {\n\treturn 'en';\n};\n\nconst AuthService = {\n\tisLogin: isLogin,\n\tgetAccessToken: getAccessToken,\n\tsetAuthData: setAuthData,\n\tgetAuthData: getAuthData,\n\tremoveAuthData: removeAuthData\n};\n\nexport default AuthService;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAGhC,MAAMC,GAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAkC;;AAElE;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAe;EAC9B,IAAIC,YAAY,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAI;EACZ,CAAC,MAAM;IACN,OAAO,KAAK;EACb;AACD,CAAC;;AAED;AACA;AACA;AACA,MAAMC,WAAW,GAAG,MAAM;EACzB,IAAI;IACH,MAAMC,IAAI,GAAGH,YAAY,CAACC,QAAQ;IAClC,IAAIE,IAAI,EAAE;MACT,MAAMC,KAAK,GAAGV,QAAQ,CAACW,GAAG,CAACC,OAAO,CAACH,IAAI,CAACI,QAAQ,EAAE,EAAEZ,GAAG,CAAC;MACxD,MAAMa,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACN,KAAK,CAACG,QAAQ,CAACb,QAAQ,CAACiB,GAAG,CAACC,IAAI,CAAC,CAAmB;MACrF,OAAOJ,aAAa;IACrB,CAAC,MAAM;MACN,OAAO,KAAK;IACb;EACD,CAAC,CAAC,OAAOK,CAAC,EAAE;IACX,OAAO,KAAK;EACb;AACD,CAAC;;AAED;AACA;AACA;AACA,MAAMC,WAAW,GAAIX,IAAoB,IAAW;EACnD,MAAMY,UAAU,GAAGrB,QAAQ,CAACW,GAAG,CAACW,OAAO,CAACP,IAAI,CAACQ,SAAS,CAACd,IAAI,CAAC,EAAER,GAAG,CAAC;EAClEK,YAAY,CAACkB,OAAO,CAAC,UAAU,EAAEH,UAAU,CAACR,QAAQ,EAAE,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA,MAAMY,cAAc,GAAG,MAAY;EAClCnB,YAAY,CAACoB,UAAU,CAAC,UAAU,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAc;EACpC,MAAMlB,IAAI,GAAGD,WAAW,EAAE;EAC1B,IAAIC,IAAI,IAAIA,IAAI,CAACmB,KAAK,EAAE;IACvB,OAAOnB,IAAI,CAACmB,KAAK;EAClB,CAAC,MAAM;IACN,OAAO,EAAE;EACV;AACD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAc;EAC5C,OAAO,IAAI;AACZ,CAAC;AAED,MAAMC,WAAW,GAAG;EACnBzB,OAAO,EAAEA,OAAO;EAChBsB,cAAc,EAAEA,cAAc;EAC9BP,WAAW,EAAEA,WAAW;EACxBZ,WAAW,EAAEA,WAAW;EACxBiB,cAAc,EAAEA;AACjB,CAAC;AAED,eAAeK,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}